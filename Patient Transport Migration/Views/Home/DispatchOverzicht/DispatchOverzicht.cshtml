@model Patient_Transport_Migration.Models.VM.DispatchOverzicht.WerknemersVM

@{
    ViewBag.Title = "Dispatch Overzicht";
}

<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/Sortable.min.js"></script>

<div class="content-container">
    <div>
        <div id="dvLoaderWerknemers" class="ajax-loader"></div>
        <div id="dvSchemaStatussen" class="alert"></div>
        <div id="dvWerknemers">
            <table class="table table-bordered table-hover table-responsive table-striped">
                <caption>
                    <span class="glyphicon glyphicon-refresh glyphicon-clickable" onclick="LoadWerknemersSchemas()"> </span>
                    <big>Werknemersschema</big>
                </caption>
                <tr>
                    <th>Werknemer</th>
                    <th>Schema</th>
                </tr>
                @foreach (var wn in Model.TransportWerknemers) {
                    <tr data-werknemer-id="@wn.Gebruikersnaam">
                        <td>
                            <span class="ajax-loader"></span>
                            <span class="glyphicon glyphicon-refresh glyphicon-clickable" onclick="LaadWerknemersSchema('@wn.Gebruikersnaam')"></span>
                            <span class="glyphicon glyphicon-ok-circle glyphicon-clickable" onclick="SaveWerknemersSchema('@wn.Gebruikersnaam', '@wn.Naam')"></span>
                            @wn.Naam
                        </td>
                        <td id="TakenSchema-@wn.Gebruikersnaam">SCHEMA</td>
                    </tr>
                }
            </table>
        </div>
    </div>
    <div>
        <div id="dvLoaderTaken" class="ajax-loader"></div>
        <div id="dvTakenStatus" class="alert"></div>
        <div id="dvTaken"></div>
    </div>
</div>

<script>
    function RemoveTaakFromSchema(WerknemerId, WerknemerNaam, TaakId) {
        var $taak = $('#' + WerknemerId +"-taak" + TaakId + '.sortable-taak');
        var sendData = {"WerknemerId" : WerknemerId, "TaakId": TaakId }

        $.ajax({
            type: "POST",
            async: true,
            dataType: "text",
            timeout: 3000,
            url: "DispatchOverzicht_RemoveWerknemerFromTaak",
            data: "jsonTaak="+JSON.stringify(sendData),
            beforeSend() {
                $taak.css({opacity: 0.5});
            }, success(result) {
                if (result == "True") { // =True
                    $taak.remove();
                    MaakSchemaStatus(WerknemerId, "alert-success",
                        "Taak verwijderd van " + WerknemerNaam);
                    LoadTaken();
                } else {
                    $taak.css({opacity: 1});
                    MaakSchemaStatus(WerknemerId, "alert-danger",
                       "Taak verwijderd mislukt! Probeer opnieuw.");
                }
            }, error(jqXHR, textStatus, errorThrown) {
                $taak.css({opacity: 1});
                MaakSchemaStatus(WerknemerId, "alert-danger",
                   "Taak verwijderd mislukt! Probeer opnieuw.");
            }
        });
    };

    function SaveWerknemersSchema(WerknemerId, WerknemerNaam) {
        var $dvCollection = $('#WnSchema-'+WerknemerId)[0];

        // Order of taak items
        var sendSequence = [];
        for (var i= 0; i< $dvCollection.children.length; i++) {
            var item = $dvCollection.children[i];
            sendSequence[i] = $(item).attr("data-wn-taak-id");
        }

        var sendData = { "WerknemerId": WerknemerId, "Taken": sendSequence}

        $.ajax({
            type: "POST",
            async: true,
            dataType: "text",
            timeout: 3000,
            url: "DispatchOverzicht_SaveWerknemerSchema",
            data: "jsonSchema="+JSON.stringify(sendData),
            success(result) {
                if (result == "True") { // =True
                    MaakSchemaStatus(WerknemerId, "alert-success",
                        "Taken succesvol opgeslagen van " + WerknemerNaam);
                    LaadWerknemersSchema(WerknemerId, WerknemerNaam)
                } else {
                    MaakSchemaStatus(WerknemerId, "alert-danger",
                       "Taken opgeslaan mislukt van " + WerknemerNaam + " ,probeer opnieuw!");
                }
            }, error(jqXHR, textStatus, errorThrown) {
                MaakSchemaStatus(WerknemerId, "alert-danger",
                       "Taken opgeslaan mislukt van " + WerknemerNaam + " ,probeer opnieuw!");
            }
        });
    };

    function LoadWerknemersSchemas() {
        var Werknemers = @Html.Raw(Json.Encode(Model.TransportWerknemers));
        for (var i = 0; i < Werknemers.length; i++) {
            LaadWerknemersSchema(Werknemers[i].Gebruikersnaam, Werknemers[i].Naam);
        };
    };

    function LaadWerknemersSchema(WerknemerId, WerknemerNaam) {
        var $tdSchema = $('#TakenSchema-'+WerknemerId);
        $.ajax({
            type: "GET",
            async: true,
            dataType: "text",
            timeout: 3000,
            url: "DispatchOverzicht_GetWerknemerTaken",
            data: "WerknemerId="+WerknemerId,
            beforeSend() {
                $tdSchema.css({opacity: 0.5});
            }, success(result) {
                $tdSchema.html('');
                $tdSchema.css({opacity: 1});
                TekenWerknemerSchema($tdSchema, WerknemerId, WerknemerNaam, JSON.parse(result));
            }, error(jqXHR, textStatus, errorThrown) {
                MaakSchemaStatus(WerknemerId, "alert-danger",
                    "Kan het schema voor " + WerknemerNaam + " niet laden, probeer opnieuw!\n" + textStatus);
            }, always() {
                $tdSchema.css({opacity: 1});
            }
        });
    };

    function TekenWerknemerSchema($tr, WerknemerId, WerknemerNaam, WerknemerTaken) {
        var $dvContainer = $('<div></div>');
        $dvContainer.prop("id", "WnSchema-"+WerknemerId);
        for (var i = 0; i < WerknemerTaken.length; i++) {
            var wnTaak = WerknemerTaken[i];
            console.log(wnTaak);
            //Bouw Item (Html)
            var $item = $('<div id=' + WerknemerId + '-taak' + wnTaak.Id +'></div>');
            $item.attr('data-wn-taak-id', wnTaak.Id);
            $item.attr('data-wn-naam', wnTaak.TransportWerknemer.Naam);
            $item.attr('data-wn-id', wnTaak.TransportWerknemerId);
            $item.addClass('sortable-taak');

            // Taak #
            var $itemNummer = $('<span></span>')
                .text(wnTaak.TaakWachtrijNummer)
                .addClass("badge");
            $item.append($itemNummer);

            // Tekst VAN
            try {
            var $itemTextVan = $('<span></span>');
            $itemTextVan.text(wnTaak.LocatieStart.Omschrijving + " " + wnTaak.LocatieStart.Kamer + " - ");
            if (wnTaak.IsPrioriteitHoog) {
                $itemTextVan.addClass("HogePrioriteit");
            };
            $item.append($itemTextVan);
            } catch(err) {}

            // Tekst NAAR
            try {
                var $itemTextNaar = $('<span></span>');
                $itemTextNaar.text(wnTaak.LocatieEind.Omschrijving + " " + wnTaak.LocatieEind.Kamer);
                if (wnTaak.IsPrioriteitHoog) {
                    $itemTextNaar.addClass("HogePrioriteit");
                };
                $item.append($itemTextNaar);
            } catch(err) {}

            // Beweegbaar icoontje
            var $moveHandle = $('<span></span>')
                .addClass("glyphicon")
                .addClass("glyphicon-move");
            $item.append($moveHandle);

            // Verwijder icoontje
            var $removeIcon = $('<span></span>')
                .addClass('glyphicon')
                .addClass('glyphicon-remove')
                .click(function() {
                    var $parent = $(this).parent('div');
                    var werknemer_id = $parent.attr('data-wn-id');
                    var werknemer_naam = $parent.attr('data-wn-naam');
                    var taak_id = $parent.attr('data-wn-taak-id');
                    RemoveTaakFromSchema(werknemer_id, werknemer_naam, taak_id);
                })
            ;
            $item.append($removeIcon);

            $dvContainer.append($item);
        }
        $tr.append($dvContainer);

        // Sortable.js List with handle
        Sortable.create(document.getElementById("WnSchema-" + WerknemerId), {
            handle: '.glyphicon-move',
            animation: 150
        });
    };

    function MaakSchemaStatus(WerknemerId, AlertType, Message) {
        var $dvSchemaStatussen = $('#dvSchemaStatussen');
        var $dvSchemaStatus = $('#SchemaStatus-' + WerknemerId);

        if ($dvSchemaStatus.length > 0) {
            $dvSchemaStatus.remove();
        }

        $dvSchemaStatus = $('<div id=SchemaStatus-' + WerknemerId + '></div>');
        $dvSchemaStatus.addClass("alert").addClass(AlertType);
        $dvSchemaStatus.text("Werknemer: " + WerknemerId + "\n" + Message);
        $dvSchemaStatus.html($dvSchemaStatus.html().replace(/\n/g, '<br/>'));

        $dvSchemaStatussen.append($dvSchemaStatus);
        $dvSchemaStatus.fadeTo("slow", "0.6", function () {
            $(this).remove();
        });
    };

    function DeleteTaak(TaakId) {
        if (confirm("Ben je zeker dat je Taak " + TaakId + " wilt verwijderen?")) {
            var $TaakTr = $('#Taak-' + TaakId);
            function fail() {
                MaakTaakStatus(TaakId, "alert-danger", "Kon de taak niet verwijderen, probeer opnieuw!");
                $TaakTr.css({ opacity: 1.0 }).show();
            };
            $.ajax({
                type: "POST",
                async: true,
                dataType: "text",
                timeout: 3000,
                url: "DispatchOverzicht_DeleteTaak",
                data: "jsonTaak=" + JSON.stringify({ "TaakId": TaakId }),
                beforeSend() {
                    $TaakTr.css({ opacity: 0.5 });
                }, success: function (data) {
                    if (data == "True") { // = True
                        MaakTaakStatus(TaakId, "alert-success", "Taak verwijderd!");
                        VerbergTaak(TaakId);
                    } else {
                        fail();
                    };
                }, error: function (jqXHR, textStatus, errorThrown) {
                    fail();
                }
            });
        };
    };

    function VerbergTaak(TaakId) {
        var $TaakTr = $('#Taak-' + TaakId);
        $TaakTr.remove();
    };

    function SaveTaakToWerknemer(TaakId) {
        var $TaakTr = $('#Taak-' + TaakId);
        var TaakWerknemerId = $('#Taak-' + TaakId + "-WerknemerId").val();

        //Controleer of alles ingegeven is
        if (TaakWerknemerId == "") {
            MaakTaakStatus(TaakId, "alert-warning",
                "Selecteer een werknemer voor je de taak opslaat!");
            return null;
        }

        // Collect data voor je post request
        var TaakNotities = $('#Taak-' + TaakId + "-TransportNotities").val();
        var TaakIsHogePrioriteit = $('#Taak-' + TaakId + "-IsPrioriteitHoog").prop('checked');

        var sendData = {
            "TaakId": TaakId,
            "TaakNotities": TaakNotities,
            "TaakIsHogePrioriteit": TaakIsHogePrioriteit,
            "TaakWerknemerId": TaakWerknemerId
        };

        $.ajax({
            type: "POST",
            async: true,
            dataType: "text",
            timeout: 3000,
            url: "DispatchOverzicht_SaveTaak",
            data: "jsonTaak=" + JSON.stringify(sendData),
            beforeSend() {
                $TaakTr.css({ opacity: 0.5 });
            }, success: function (data) {
                if (data) { // = True
                    MaakTaakStatus(TaakId, "alert-success", "Taak toegewezen");
                    VerbergTaak(TaakId);
                    LaadWerknemersSchema(TaakWerknemerId);
                } else {
                    MaakTaakStatus(TaakId, "alert-danger", "Kon de taak niet opslaan, probeer opnieuw!");
                    $TaakTr.css({ opacity: 1.0 }).show();
                };
            }, error: function (jqXHR, textStatus, errorThrown) {
                MaakTaakStatus(TaakId, "alert-danger", "Kon de taak niet opslaan, probeer opnieuw!\n" + textStatus);
                $TaakTr.css({ opacity: 1.0 }).show();
            }
        });
    };

    function MaakTaakStatus(TaakId, AlertType, Message) {
        var $dvTakenStatus = $('#dvTakenStatus');
        var $dvTaakStatus = $('#Taak-Status-' + TaakId);

        if ($dvTaakStatus.length > 0) {
            $dvTaakStatus.remove();
        }

        $dvTaakStatus = $('<div id=Taak-Status-' + TaakId + '></div>');
        $dvTaakStatus.addClass("alert").addClass(AlertType);
        $dvTaakStatus.text("Taak: " + TaakId + "\n" + Message);
        $dvTaakStatus.html($dvTaakStatus.html().replace(/\n/g, '<br/>'));

        $dvTakenStatus.append($dvTaakStatus);
        $dvTaakStatus.fadeTo("slow", "0.6", function () {
            $(this).remove();
        });
    };

    function LoadTaken() {
        var $ajaxLoaderTaken = $('#dvLoaderTaken');
        var $dvTaken = $("#dvTaken");
        $ajaxLoaderTaken.show();
        $.ajax({
            type: "GET",
            cache: false,
            async: true,
            url: "GetDispatchOverzicht_WachtendeTransportTaken",
            beforeSend: function () {
                $dvTaken.css({ opacity: 0.5 });
            }, success: function (result) {
                $dvTaken.html(result);
            }, error: function (jqXHR, textStatus, errorThrown) {
                $dvTaken.html(
                    "<p class=\"alert alert-warning\">Probleem met het verkrijgen van de data.<br />" + textStatus + ": " + errorThrown);
            }, complete: function () {
                $ajaxLoaderTaken.hide();
                $dvTaken.css({ opacity: 1.0 }).show();
            }
        })
    };

    $(new function () {
        $.fx.speeds.slow = 6000;
        LoadTaken();
        LoadWerknemersSchemas();
    });
</script>